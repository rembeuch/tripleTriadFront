import Head from 'next/head'
import Image from 'next/image'
import Layout from '@/components/Layout/Layout'
import { useAccount, useProvider, useSigner } from 'wagmi'
import { Text } from '@chakra-ui/react'
import {
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
} from '@chakra-ui/react'
import { useEffect, useState } from "react";
import NewPlayerForm from './player/NewPlayerForm'
import Link from 'next/link';
import { useRouter } from 'next/router';


export default function Home() {
  const router = useRouter();
  const [player, setPlayer] = useState(null);
  const [game, setGame] = useState(null);
  const [showAlert, setShowAlert] = useState(false);


  const { address, isConnected } = useAccount()

  async function getPlayer() {
    const response = await fetch(`${`http://localhost:3000/api/v1/find?address=${address}`}`);
    return response.json();
  }

  async function getGame() {
    const response = await fetch(`${`http://localhost:3000/api/v1/find_game?address=${address}`}`);
    return response.json();
  }

  useEffect(() => {
    const fetchCurrentPlayer = async () => {
      try {
        const json = await getPlayer();
        setPlayer(json);
      } catch (error) {
        console.error("Failed to fetch the player: ", error);
      }
    };
    fetchCurrentPlayer();
  }, []);

  useEffect(() => {
    const fetchCurrentGame = async () => {
      try {
        const json = await getGame();
        setGame(json);
      } catch (error) {
        console.error("Failed to fetch the player: ", error);
      }
    };
    fetchCurrentGame();
  }, []);

  async function createGameUrl() {

    const response = await fetch(`${`http://localhost:3000/api/v1/games?address=${address}`}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
    if (response.ok) {
      const responseData = await response.json();
      const gameId = responseData.id;
      router.push(`/game/${gameId}`)
    } else {
      setShowAlert(true);
      setTimeout(() => {
        setShowAlert(false)
      }, 3000);
    }
  }

  return (
    <>
      <Head>
        <title>Alyra DApp : Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {isConnected ? (
          <div className="App">
            <div>
              {player ? (
                <>
                  <h2>Name: {player.name}</h2>
                  <p>Address: {player.wallet_address}</p>
                  <Link href="/player/[id]" as={`/player/${player.id}`}>
                    <button style={{
                      color: "#F9DC5C",
                      backgroundColor: "blue",
                      padding: 10,
                      margin: 10,
                      transition: "background-color 0.3s ease",
                      borderRadius: 5,
                      textDecoration: "none"
                    }} >Dashboard </button>
                  </Link>
                  {game ? (
                    <Link href="/game/[id]" as={`/game/${game.id}`}>
                      <button style={{
                        color: "#F9DC5C",
                        backgroundColor: "green",
                        padding: "10px 50px",
                        margin: 10,
                        transition: "background-color 0.3s ease",
                        borderRadius: 5,
                        textDecoration: "none"
                      }} > Play </button>
                    </Link>
                  ) : (
                    
                    <Link href="/game/NewGameForm" style={{
                      color: "#F9DC5C",
                      backgroundColor: "green",
                      padding: "10px 50px",
                      margin: 10,
                      transition: "background-color 0.3s ease",
                      borderRadius: 5,
                      textDecoration: "none"
                    }} > New Game </Link>

                  )
                  }
                  {showAlert && <div>
                    <Alert status='warning' width="50%">
                      <AlertIcon />
                      Your Team is not complete!
                    </Alert>
                  </div>
                  }
                </>
              ) :
                <NewPlayerForm />
              }
            </div>
          </div>
        ) : (
          <Alert status='warning' width="50%">
            <AlertIcon />
            Please, connect your Wallet!
          </Alert>
        )}
      </Layout>
    </>
  )
}
